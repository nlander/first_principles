
==================== FINAL INTERFACE ====================
2016-01-12 17:55:35.218477 UTC

interface main@main:Main 7102
  interface hash: c5c1123fe218fa0f9356450f3ad5cfc9
  ABI hash: feeca9cd65628be8b84d46eeede22297
  export-list hash: c9bd08d14e2f0118a1da5f3218dd8a9a
  orphan hash: bdd601b007290c6d179aff23a98dcfcf
  flag hash: 0fad2f7a9b9ea8704faaec519b3418c8
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: HUnit-1.2.5.2@HUnit_BtnRLgvPKTa5fiI6MJ17K4
                      QuickCheck-2.8.1@Quick_BnZKeqxVf7FCbnejbqAnPL
                      ansi-terminal-0.6.2.3@ansit_KW0LUY2zB7JCYzE4ZYrwBg
                      array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ
                      async-2.0.2@async_J3wPtBMkDlC1zlPIsbgEk9 base-4.8.1.0
                      containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o
                      division-0.1.0.0@divis_383lyAwimmM8tDCaie5nHe ghc-prim-0.4.0.0
                      hspec-expectations-0.7.1@hspec_0zFq9z9Xp7A35IPH60vske
                      hspec-2.1.10@hspec_6v6j22VJyLg98uGX19QkK8
                      hspec-core-2.1.10@hspec_BnliQduF2MDI5yWEzyjr7L integer-gmp-1.0.0.0
                      pretty-1.1.2.0@prett_7UQTOB05U7lIYPkFOVraeR
                      primitive-0.6.1.0@primi_5Jnw7oEuYtM9dmKXelGXVb
                      quickcheck-io-0.1.2@quick_JZsE6PAs6pbGjOZzU4IfNh
                      random-1.1@rando_1z8Ujelqc6aKgvPnbRUKkP
                      setenv-0.1.1.3@seten_AuHTDNoaveDAxwtvx7iZhq
                      stm-2.4.4@stm_C1kFMnPqFjvDhFjgMZGUpr template-haskell-2.10.0.0
                      tf-random-0.5@tfran_28prfR75qTK8HkPsc02Mdm
                      time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH
                      transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         quickcheck-io-0.1.2@quick_JZsE6PAs6pbGjOZzU4IfNh:Test.QuickCheck.IO
         stm-2.4.4@stm_C1kFMnPqFjvDhFjgMZGUpr:Control.Monad.STM
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.Format.Parse
         time-1.5.0.1@time_AXTdBF9VRQoBOqJT6qtmVH:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.Error
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Functor.Identity
                         base-4.8.1.0:Data.Monoid base-4.8.1.0:Data.Type.Equality
                         base-4.8.1.0:Data.Void base-4.8.1.0:GHC.Exts
                         base-4.8.1.0:GHC.Generics
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
                         hspec-core-2.1.10@hspec_BnliQduF2MDI5yWEzyjr7L:Test.Hspec.Core.Example
                         pretty-1.1.2.0@prett_7UQTOB05U7lIYPkFOVraeR:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_5Jnw7oEuYtM9dmKXelGXVb:Control.Monad.Primitive
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.8.1@Quick_BnZKeqxVf7FCbnejbqAnPL:Test.QuickCheck 56c452ad8c9684c4a3ff945aba05abd7
import  -/  QuickCheck-2.8.1@Quick_BnZKeqxVf7FCbnejbqAnPL:Test.QuickCheck.Test cf350c6a3843ffad9e4400f8967be933
import  -/  base-4.8.1.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  division-0.1.0.0@divis_383lyAwimmM8tDCaie5nHe:Division 256daf8aaf2816e9cffca9589dcf871a
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  hspec-2.1.10@hspec_6v6j22VJyLg98uGX19QkK8:Test.Hspec 4a93aea64f6d9be6e2f6703428397fbf
85b61bb2cb6cafdf7604ea2b8586e4d9
  $s$fTestable(->) ::
    Test.QuickCheck.Property.Testable (GHC.Types.Int -> GHC.Types.Bool)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int -> GHC.Types.Bool)
                  (Test.QuickCheck.Property.$fTestable(->)_$cproperty
                     @ GHC.Types.Int
                     @ GHC.Types.Bool
                     Test.QuickCheck.Arbitrary.$fArbitraryInt
                     GHC.Show.$fShowInt
                     Test.QuickCheck.Property.$fTestableBool)
                  Main.$s$fTestable(->)_$s$fTestable(->)_$cexhaustive -}
10eb27ad6344f2077f45e3dad94ac4a1
  $s$fTestable(->)_$s$fTestable(->)_$cexhaustive ::
    (GHC.Types.Int -> GHC.Types.Bool) -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: GHC.Types.Int -> GHC.Types.Bool -> GHC.Types.False) -}
6b8723a2edfed6dc787cc32836802708
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
c4b87a2d3eedad1fa95bf027bdd16719
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Test.QuickCheck.Test.$wa7
                        @ (GHC.Types.Int -> GHC.Types.Bool)
                        Main.$s$fTestable(->)
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        Main.main2
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
8f2a9d17ff3ad6740e77f009961bd794
  main2 :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ x :: GHC.Types.Int ->
                 case x of wild { GHC.Types.I# x1 -> GHC.Types.False }) -}
c74219be43342b04f70b1bf03a5f34d2
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
"SPEC/Main $fTestable(->) @ Int @ Bool" [ALWAYS] forall $dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                         GHC.Types.Int
                                                        $dShow :: GHC.Show.Show GHC.Types.Int
                                                        $dTestable :: Test.QuickCheck.Property.Testable
                                                                        GHC.Types.Bool
  Test.QuickCheck.Property.$fTestable(->) @ GHC.Types.Int
                                          @ GHC.Types.Bool
                                          $dArbitrary
                                          $dShow
                                          $dTestable
  = Main.$s$fTestable(->)
"SPEC/Main $fTestable(->)_$cexhaustive @ Int @ Bool" [ALWAYS] forall $dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                                      GHC.Types.Int
                                                                     $dShow :: GHC.Show.Show
                                                                                 GHC.Types.Int
                                                                     $dTestable :: Test.QuickCheck.Property.Testable
                                                                                     GHC.Types.Bool
  Test.QuickCheck.Property.$fTestable(->)_$cexhaustive @ GHC.Types.Int
                                                       @ GHC.Types.Bool
                                                       $dArbitrary
                                                       $dShow
                                                       $dTestable
  = Main.$s$fTestable(->)_$s$fTestable(->)_$cexhaustive
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

