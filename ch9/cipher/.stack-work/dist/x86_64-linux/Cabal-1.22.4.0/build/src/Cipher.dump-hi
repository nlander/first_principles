
==================== FINAL INTERFACE ====================
2016-03-04 11:36:44.453187 UTC

interface ciphe_GPYUIE8kjCL55yn7PvZrUR:Cipher 7102
  interface hash: 080f80ce56bd52005bf763b1ea88ee36
  ABI hash: 18b7965cd5e4c2e012237077acbe2560
  export-list hash: 792e1d3276edcc18e1b6ea3c464c25a8
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1177ed9910be22cb08b17094c1021b20
  sig of: Nothing
  used TH splices: False
  where
exports:
  Cipher.caesar
  Cipher.cipher
  Cipher.unCaesar
  Cipher.unVigenere
  Cipher.vigenere
module dependencies:
package dependencies: base-4.8.1.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Monoid
                         base-4.8.1.0:Data.Type.Equality base-4.8.1.0:GHC.Generics
import  -/  base-4.8.1.0:Control.Monad dfea142d91349c4861427789d50d5b80
import  -/  base-4.8.1.0:Data.Char ba93ec4ca3776f6d9a8c8a6223b2fb26
import  -/  base-4.8.1.0:Data.Foldable 2e5acb797cfda6b3b7fabd7052abe290
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:GHC.Char 612e350e38947989d78fc181dfd596f1
import  -/  base-4.8.1.0:GHC.List f31ed8784b3e05f1397195751f7d74ea
import  -/  base-4.8.1.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.1.0:GHC.Real 4c3b525ecbd4d62bb287aec36d4c2f0d
import  -/  base-4.8.1.0:GHC.Unicode bed09d5db094d4196c8520e6b25efaa4
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  base-4.8.1.0:System.Exit 667ccf9b7fe125c4036efb58a244974a
import  -/  base-4.8.1.0:System.IO d541b8bdf18c04de3ab7ea0277c4eba3
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
0297339cd23e20f9c98fcdf19546af6b
  $wencriptChr :: GHC.Types.Int -> GHC.Prim.Char# -> GHC.Prim.Char#
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>, Inline: [0],
     Unfolding: (\ w :: GHC.Types.Int ww :: GHC.Prim.Char# ->
                 let {
                   $w$j :: GHC.Prim.Void# -> GHC.Prim.Char#
                     {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                   = \ void :: GHC.Prim.Void#[OneShot] ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.geChar# ww 'a') of wild1 {
                       GHC.Types.False -> ww
                       GHC.Types.True
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.leChar# ww 'z') of wild {
                            GHC.Types.False -> ww
                            GHC.Types.True
                            -> case w of wild2 { GHC.Types.I# x ->
                               case GHC.Classes.modInt#
                                      (GHC.Prim.+# x (GHC.Prim.-# (GHC.Prim.ord# ww) 97))
                                      26 of ww2 { DEFAULT ->
                               let {
                                 i# :: GHC.Prim.Int# = GHC.Prim.+# 97 ww2
                               } in
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.leWord#
                                         (GHC.Prim.int2Word# i#)
                                         __word 1114111) of wild3 {
                                 GHC.Types.False
                                 -> case GHC.Char.chr2 i# ret_ty GHC.Prim.Char# of {}
                                 GHC.Types.True -> GHC.Prim.chr# i# } } } } }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.geChar# ww 'A') of wild1 {
                   GHC.Types.False -> $w$j GHC.Prim.void#
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.leChar# ww 'Z') of wild {
                        GHC.Types.False -> $w$j GHC.Prim.void#
                        GHC.Types.True
                        -> case w of wild2 { GHC.Types.I# x ->
                           case GHC.Classes.modInt#
                                  (GHC.Prim.+# x (GHC.Prim.-# (GHC.Prim.ord# ww) 65))
                                  26 of ww2 { DEFAULT ->
                           let {
                             i# :: GHC.Prim.Int# = GHC.Prim.+# 65 ww2
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.leWord#
                                     (GHC.Prim.int2Word# i#)
                                     __word 1114111) of wild3 {
                             GHC.Types.False
                             -> case GHC.Char.chr2 i# ret_ty GHC.Prim.Char# of {}
                             GHC.Types.True -> GHC.Prim.chr# i# } } } } }) -}
092462f9587c9e2d59184ec7c58d492c
  data Cipher = Caesar | Vigenere
    Promotable
44506a99bfe520ff38a71b4663e7d204
  data EncodeingDirection = Encode | Decode
    Promotable
501b3214f44f1c80487b6956984e0800
  type Keyword = GHC.Base.String
845ec6f5157c78ab99e3f7cd1bd87681
  caesar :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: [GHC.Types.Char] ->
                 GHC.Base.build
                   @ GHC.Types.Char
                   (\ @ b1
                      c :: GHC.Types.Char -> b1 -> b1[OneShot]
                      n :: b1[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b1
                      (GHC.Base.mapFB
                         @ GHC.Types.Char
                         @ b1
                         @ GHC.Types.Char
                         c
                         (Cipher.encriptChr Cipher.caesar_enc))
                      n
                      eta)) -}
0089ec5aff7cfacbb994de5bf71e0401
  caesar_enc :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5) -}
71f90eca1f4c7e0c931c98431cb7b974
  cipher :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Cipher.cipher1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
7a7b65ec7d7f92919f5fefe2e25fc8cf
  cipher1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Cipher.cipher4
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Cipher.cipher3
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 Cipher.cipher2 ipv2 } }) -}
b288bea36ea79100910bcab61e05d035
  cipher2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U> -}
94d331fbc378a035893b310997162804
  cipher3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Would you like a caesar (c) or vigenere (v)?"#) -}
8d47f3c139ada2798044c7cecad53c7e
  cipher4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Welcome to the cipher!"#) -}
5963405ab4bb13b284438029ff73eb27
  encriptChr :: GHC.Types.Int -> GHC.Types.Char -> GHC.Types.Char
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U(U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: GHC.Types.Char ->
                 case w1 of ww { GHC.Types.C# ww1 ->
                 case Cipher.$wencriptChr w ww1 of ww2 { DEFAULT ->
                 GHC.Types.C# ww2 } }) -}
f3fa4fa7fc02dac64314bdc9686616a2
  unCaesar :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: [GHC.Types.Char] ->
                 GHC.Base.build
                   @ GHC.Types.Char
                   (\ @ b1
                      c :: GHC.Types.Char -> b1 -> b1[OneShot]
                      n :: b1[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b1
                      (GHC.Base.mapFB
                         @ GHC.Types.Char
                         @ b1
                         @ GHC.Types.Char
                         c
                         (Cipher.encriptChr Cipher.unCaesar_enc))
                      n
                      eta)) -}
b30d02ad552af1ee7ef4dfb63e6edbd8
  unCaesar_enc :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# (-5)) -}
2cf0c09869ca94f5c1936dee0d7043d8
  unVigenere :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ msg :: GHC.Base.String ->
                 Cipher.unVigenere_go
                   (GHC.List.reverse1
                      @ GHC.Types.Char
                      (Cipher.unVigenere_putInSpacesHelper
                         (GHC.Types.[] @ GHC.Types.Char)
                         msg
                         Cipher.unVigenere_xs)
                      (GHC.Types.[] @ GHC.Types.Char))
                   msg) -}
e68106000aa143833a1b8b096f33b2a0
  unVigenere_go ::
    [GHC.Types.Char] -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
84e33381bc56cc5962550aa72b7ed369
  unVigenere_putInSpacesHelper ::
    [GHC.Types.Char]
    -> [GHC.Types.Char] -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 3, Strictness: <L,U><S,1*U><L,1*U> -}
e09687818aa06a802bc52487ab8db059
  unVigenere_xs :: [GHC.Types.Char]
76f45049a8cccfe65d6007ecccd9c56e
  vigenere :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ msg :: GHC.Base.String ->
                 Cipher.vigenere_go
                   (GHC.List.reverse1
                      @ GHC.Types.Char
                      (Cipher.unVigenere_putInSpacesHelper
                         (GHC.Types.[] @ GHC.Types.Char)
                         msg
                         Cipher.vigenere_xs)
                      (GHC.Types.[] @ GHC.Types.Char))
                   msg) -}
38d497681c554a08c790f68d15f4033a
  vigenere_go ::
    [GHC.Types.Char] -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
f84dfa04816e891c00597b3f2a7d2fe3
  vigenere_xs :: [GHC.Types.Char]
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

